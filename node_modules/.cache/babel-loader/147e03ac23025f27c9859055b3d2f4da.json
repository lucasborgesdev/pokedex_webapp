{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nconst baseUrl = 'https://pokeapi.co/api/v2/pokemon';\nexport const FETCHING_POKEMON = 'FETCHING_POKEMON';\nexport const FETCHED_POKEMON = 'FETCHED_POKEMON';\nexport const FETCH_POKEMON_ERROR = 'FETCH_POKEMON_ERROR';\nexport const FETCHING_SINGLE_POKEMON = 'FETCHING_SINGLE_POKEMON';\nexport const FETCHED_SINGLE_POKEMON = 'FETCHED_SINGLE_POKEMON';\nexport const FETCH_SINGLE_POKEMON_ERROR = 'FETCH_SINGLE_POKEMON_ERROR';\nexport function fetchingPokemon() {\n  return {\n    type: 'FETCHING_POKEMON'\n  };\n}\nexport function fetchedPokemon(allPokemon) {\n  return {\n    type: 'FETCHED_POKEMON',\n    payload: allPokemon\n  };\n}\nexport function fetchPokemonError(error) {\n  return {\n    type: 'FETCH_POKEMON_ERROR',\n    payload: error\n  };\n}\nexport function fetchPokemon(offset, limit) {\n  return async function (dispatch) {\n    try {\n      dispatch(fetchingPokemon());\n      const url = \"\".concat(baseUrl, \"/?offset=\").concat(offset, \"&limit=\").concat(limit);\n      let response = await fetch(url);\n      let json = await response.json();\n\n      if (response.ok) {\n        return dispatch(fetchedPokemon(json));\n      } else {\n        throw new Error(json.message);\n      }\n    } catch (error) {\n      return dispatch(fetchPokemonError(error));\n    }\n  };\n}\nexport function fetchingSinglePokemon() {\n  return {\n    type: 'FETCHING_SINGLE_POKEMON'\n  };\n}\nexport function fetchedSinglePokemon(single_pokemon) {\n  return {\n    type: 'FETCHED_SINGLE_POKEMON',\n    payload: single_pokemon\n  };\n}\nexport function fetchSinglePokemonError(error) {\n  return {\n    type: 'FETCH_SINGLE_POKEMON_ERROR',\n    payload: error\n  };\n}\nexport function fetchSinglePokemon(pokemonName) {\n  return async function (dispatch) {\n    try {\n      dispatch(fetchingSinglePokemon());\n      let response = await fetch('https://pokeapi.co/api/v2/pokemon/' + pokemonName);\n      let json = await response.json();\n\n      if (response.ok) {\n        return dispatch(fetchedSinglePokemon(json));\n      } else {\n        throw new Error(json.message);\n      }\n    } catch (error) {\n      return dispatch(fetchSinglePokemonError(error));\n    }\n  };\n}","map":{"version":3,"sources":["/home/luisa/pokedex_webapp/pokedex/src/actions/Pokemon.jsx"],"names":["fetch","baseUrl","FETCHING_POKEMON","FETCHED_POKEMON","FETCH_POKEMON_ERROR","FETCHING_SINGLE_POKEMON","FETCHED_SINGLE_POKEMON","FETCH_SINGLE_POKEMON_ERROR","fetchingPokemon","type","fetchedPokemon","allPokemon","payload","fetchPokemonError","error","fetchPokemon","offset","limit","dispatch","url","response","json","ok","Error","message","fetchingSinglePokemon","fetchedSinglePokemon","single_pokemon","fetchSinglePokemonError","fetchSinglePokemon","pokemonName"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AAEA,MAAMC,OAAO,GAAG,mCAAhB;AAEA,OAAO,MAAMC,gBAAgB,GAAa,kBAAnC;AACP,OAAO,MAAMC,eAAe,GAAc,iBAAnC;AACP,OAAO,MAAMC,mBAAmB,GAAU,qBAAnC;AACP,OAAO,MAAMC,uBAAuB,GAAM,yBAAnC;AACP,OAAO,MAAMC,sBAAsB,GAAO,wBAAnC;AACP,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AAEP,OAAO,SAASC,eAAT,GAA2B;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH;AAED,OAAO,SAASC,cAAT,CAAwBC,UAAxB,EAAoC;AACvC,SAAO;AACHF,IAAAA,IAAI,EAAK,iBADN;AAEHG,IAAAA,OAAO,EAAED;AAFN,GAAP;AAIH;AAED,OAAO,SAASE,iBAAT,CAA2BC,KAA3B,EAAkC;AACrC,SAAO;AACHL,IAAAA,IAAI,EAAI,qBADL;AAEHG,IAAAA,OAAO,EAAEE;AAFN,GAAP;AAIH;AAED,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqC;AACxC,SAAO,gBAAgBC,QAAhB,EAA0B;AAC7B,QAAI;AACAA,MAAAA,QAAQ,CAACV,eAAe,EAAhB,CAAR;AACA,YAAMW,GAAG,aAAMlB,OAAN,sBAAyBe,MAAzB,oBAAyCC,KAAzC,CAAT;AAEA,UAAIG,QAAQ,GAAG,MAAMpB,KAAK,CAACmB,GAAD,CAA1B;AACA,UAAIE,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAT,EAAjB;;AACA,UAAID,QAAQ,CAACE,EAAb,EAAiB;AACb,eAAOJ,QAAQ,CAACR,cAAc,CAACW,IAAD,CAAf,CAAf;AACH,OAFD,MAEO;AACH,cAAM,IAAIE,KAAJ,CAAUF,IAAI,CAACG,OAAf,CAAN;AACH;AACJ,KAXD,CAWE,OAAOV,KAAP,EAAc;AACZ,aAAOI,QAAQ,CAACL,iBAAiB,CAACC,KAAD,CAAlB,CAAf;AACH;AACJ,GAfD;AAgBH;AAED,OAAO,SAASW,qBAAT,GAAiC;AACpC,SAAO;AACHhB,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH;AAED,OAAO,SAASiB,oBAAT,CAA8BC,cAA9B,EAA8C;AACjD,SAAO;AACHlB,IAAAA,IAAI,EAAK,wBADN;AAEHG,IAAAA,OAAO,EAAEe;AAFN,GAAP;AAIH;AAED,OAAO,SAASC,uBAAT,CAAiCd,KAAjC,EAAwC;AAC3C,SAAO;AACHL,IAAAA,IAAI,EAAI,4BADL;AAEHG,IAAAA,OAAO,EAAEE;AAFN,GAAP;AAIH;AAED,OAAO,SAASe,kBAAT,CAA4BC,WAA5B,EAAyC;AAC5C,SAAO,gBAAgBZ,QAAhB,EAA0B;AAC7B,QAAI;AACAA,MAAAA,QAAQ,CAACO,qBAAqB,EAAtB,CAAR;AACA,UAAIL,QAAQ,GAAG,MAAMpB,KAAK,CAAC,uCAAuC8B,WAAxC,CAA1B;AACA,UAAIT,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAT,EAAjB;;AACA,UAAID,QAAQ,CAACE,EAAb,EAAiB;AACb,eAAOJ,QAAQ,CAACQ,oBAAoB,CAACL,IAAD,CAArB,CAAf;AACH,OAFD,MAEO;AACH,cAAM,IAAIE,KAAJ,CAAUF,IAAI,CAACG,OAAf,CAAN;AACH;AACJ,KATD,CASE,OAAOV,KAAP,EAAc;AACZ,aAAOI,QAAQ,CAACU,uBAAuB,CAACd,KAAD,CAAxB,CAAf;AACH;AACJ,GAbD;AAcH","sourcesContent":["import fetch from 'isomorphic-fetch'\n\nconst baseUrl = 'https://pokeapi.co/api/v2/pokemon';\n\nexport const FETCHING_POKEMON           = 'FETCHING_POKEMON'\nexport const FETCHED_POKEMON            = 'FETCHED_POKEMON'\nexport const FETCH_POKEMON_ERROR        = 'FETCH_POKEMON_ERROR'\nexport const FETCHING_SINGLE_POKEMON    = 'FETCHING_SINGLE_POKEMON'\nexport const FETCHED_SINGLE_POKEMON     = 'FETCHED_SINGLE_POKEMON'\nexport const FETCH_SINGLE_POKEMON_ERROR = 'FETCH_SINGLE_POKEMON_ERROR'\n\nexport function fetchingPokemon() {\n    return {\n        type: 'FETCHING_POKEMON'\n    }\n}\n\nexport function fetchedPokemon(allPokemon) {\n    return {\n        type:    'FETCHED_POKEMON',\n        payload: allPokemon,\n    }\n}\n  \nexport function fetchPokemonError(error) {\n    return {\n        type:   'FETCH_POKEMON_ERROR',\n        payload: error\n    }\n}\n\nexport function fetchPokemon(offset, limit) {\n    return async function (dispatch) {\n        try {\n            dispatch(fetchingPokemon())\n            const url = `${baseUrl}/?offset=${offset}&limit=${limit}`;\n\n            let response = await fetch(url)\n            let json = await response.json();\n            if (response.ok) {\n                return dispatch(fetchedPokemon(json));\n            } else {\n                throw new Error(json.message);\n            }\n        } catch (error) {\n            return dispatch(fetchPokemonError(error));\n        }\n    }\n}\n\nexport function fetchingSinglePokemon() {\n    return {\n        type: 'FETCHING_SINGLE_POKEMON'\n    }\n}\n\nexport function fetchedSinglePokemon(single_pokemon) {\n    return {\n        type:    'FETCHED_SINGLE_POKEMON',\n        payload: single_pokemon,\n    }\n}\n  \nexport function fetchSinglePokemonError(error) {\n    return {\n        type:   'FETCH_SINGLE_POKEMON_ERROR',\n        payload: error\n    }\n}\n\nexport function fetchSinglePokemon(pokemonName) {\n    return async function (dispatch) {\n        try {\n            dispatch(fetchingSinglePokemon())\n            let response = await fetch('https://pokeapi.co/api/v2/pokemon/' + pokemonName)\n            let json = await response.json();\n            if (response.ok) {\n                return dispatch(fetchedSinglePokemon(json));\n            } else {\n                throw new Error(json.message);\n            }\n        } catch (error) {\n            return dispatch(fetchSinglePokemonError(error));\n        }\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}